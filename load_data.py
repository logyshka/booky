from core.models import Author, Genre, Book  # Замените `your_app` на имя вашего приложения


def load_data():
    # Заполняем авторов
    authors = [
        'Лев Толстой', 'Федор Достоевский', 'Антон Чехов', 'Александр Пушкин',
        'Николай Гоголь', 'Иван Тургенев', 'Максим Горький', 'Михаил Лермонтов',
        'Борис Пастернак', 'Андрей Платонов'
    ]

    for name in authors:
        Author.objects.get_or_create(fullname=name)

    # Заполняем жанры
    genres = [
        'Роман', 'Повесть', 'Драма', 'Комедия', 'Поэзия', 'Фантастика',
        'Исторический', 'Приключения', 'Трагедия', 'Сатира'
    ]

    for name in genres:
        Genre.objects.get_or_create(name=name)

    # Заполняем книги
    books = [
        ('Идиот', 'Роман о молодом князе Мышкине', 'Федор Достоевский', [1, 3], 8.8),
        ('Братья Карамазовы', 'История семьи Карамазовых', 'Федор Достоевский', [1, 3], 9.3),
        ('Чайка', 'Драма о жизни артистов', 'Антон Чехов', [3], 8.5),
        ('Вишневый сад', 'Комедия и драма о потере имущества', 'Антон Чехов', [3], 8.6),
        ('Евгений Онегин', 'Роман в стихах о жизни и любви', 'Александр Пушкин', [1], 9.1),
        ('Капитанская дочка', 'Повесть о любви и отваге', 'Николай Гоголь', [2], 8.7),
        ('Мертвые души', 'Сатирическая повесть о купцах и чиновниках', 'Николай Гоголь', [2], 8.9),
        ('Отцы и дети', 'Роман о конфликте поколений', 'Иван Тургенев', [1], 9.0),
        ('На дне', 'Пьеса о жизни нищих', 'Максим Горький', [3], 8.8),
        ('Герой нашего времени', 'Роман о жизни и приключениях Печорина', 'Михаил Лермонтов', [1], 8.9),
        ('Доктор Живаго', 'История о жизни врача и поэта', 'Борис Пастернак', [1], 9.2),
        ('Котлован', 'Роман о социальном строительстве', 'Андрей Платонов', [6], 8.7),
        ('Ася', 'Рассказ о любви и непонимании', 'Иван Тургенев', [2], 8.5),
        ('Смерть Ивана Ильича', 'Повесть о смерти и жизни', 'Лев Толстой', [1], 9.0),
        ('Старуха Изергиль', 'Рассказ о жизни и судьбе', 'Максим Горький', [5], 8.6),
        ('Магнитная буря', 'Рассказ о судьбе и любви', 'Андрей Платонов', [6], 8.8),
        ('Тихий Дон', 'Роман о жизни казаков в России', 'Иван Тургенев', [7], 9.1),
        ('Шинель', 'Рассказ о жизни мелкого чиновника', 'Николай Гоголь', [2], 8.9),
        ('Андрей Белый', 'Роман о жизни и творчестве', 'Андрей Платонов', [3], 8.8),
        ('Декамерон', 'Сборник новелл о жизни и любви', 'Джованни Боккаччо', [1], 8.7),
        ('История одного города', 'Сатирическая повесть о русском городе', 'Николай Гоголь', [10], 8.6),
        ('Униженные и оскорбленные', 'Роман о жизни и судьбе', 'Федор Достоевский', [3], 8.7),
        ('Пиковая дама', 'Повесть о судьбе и любви', 'Александр Пушкин', [4], 8.8),
        ('Барышня-крестьянка', 'Комедия о жизни и любви', 'Александр Пушкин', [4], 8.9),
    ]

    for title, description, author_name, genre_ids, rating in books:
        author = Author.objects.filter(fullname=author_name).first()
        if author is None:
            print(f'Author {author_name} not found')
            continue
        book = Book.objects.create(title=title, description=description, author=author, rating=rating)
        book.genres.set(Genre.objects.filter(id__in=genre_ids))


def delete_data():
    Author.objects.all().delete()
    Genre.objects.all().delete()
    Book.objects.all().delete()


if __name__ == '__main__':
    load_data()
